{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","increment","bind","assertThisInitialized","decrement","reset","setState","react_default","a","createElement","full","size","Column","onClick","className","color","rounded","outlined","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QA8DeA,qBAzDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,GAETR,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACjBA,EAAKY,UAAYZ,EAAKY,UAAUF,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACjBA,EAAKa,MAAQb,EAAKa,MAAMH,KAAXT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPIA,2EAWjBG,KAAKW,SAAS,CACZN,MAAOL,KAAKI,MAAMC,MAAQ,wCAKzBL,KAAKI,MAAMC,MAAQ,GACpBL,KAAKW,SAAS,CACZN,MAAOL,KAAKI,MAAMC,MAAQ,oCAM9BL,KAAKW,SAAS,CACZN,MAAO,qCAKT,OACEO,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,UAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASC,KAAM,GAAf,uCACAJ,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,QAAQE,OAAT,CAAgBD,KAAM,GACpBJ,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQG,QAASlB,KAAKM,UAAWa,UAAU,aAAaC,MAAM,UAAUJ,KAAK,QAAQK,SAAO,EAACC,UAAQ,GAArG,OAEFV,EAAAC,EAAAC,cAACC,EAAA,QAAQE,OAAT,CAAgBD,KAAM,GACpBJ,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQG,QAASlB,KAAKS,UAAWU,UAAU,aAAaC,MAAM,SAASJ,KAAK,QAAQK,SAAO,EAACC,UAAQ,GAApG,OAEFV,EAAAC,EAAAC,cAACC,EAAA,QAAQE,OAAT,CAAgBD,KAAM,GACpBJ,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQG,QAASlB,KAAKU,MAAOS,UAAU,aAAaC,MAAM,SAASJ,KAAK,QAAQK,SAAO,EAACC,UAAQ,GAAhG,YAINV,EAAAC,EAAAC,cAACC,EAAA,UAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,QAAD,8BACyBf,KAAKI,MAAMC,gBAlD5BkB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aa3709ab.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Heading, Columns, Section, Container, Hero } from \"react-bulma-components/full\"\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0\n    }\n    this.increment = this.increment.bind(this)\n    this.decrement = this.decrement.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  increment() {\n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n\n  decrement() {\n    if(this.state.count > 0) {\n      this.setState({\n        count: this.state.count - 1\n      })\n    }\n  }\n\n  reset() {\n    this.setState({\n      count: 0\n    })\n  }\n\n  render() {\n    return (\n      <Section>\n        <Container>\n          <Heading size={1}>Dead Simple Counter App Using React</Heading>\n          <Columns>\n            <Columns.Column size={4}>\n              <Button onClick={this.increment} className=\"full-width\" color=\"success\" size=\"large\" rounded outlined>+1</Button>\n            </Columns.Column>\n            <Columns.Column size={4}>\n              <Button onClick={this.decrement} className=\"full-width\" color=\"danger\" size=\"large\" rounded outlined>-1</Button>\n            </Columns.Column>\n            <Columns.Column size={4}>\n              <Button onClick={this.reset} className=\"full-width\" color=\"danger\" size=\"large\" rounded outlined>Reset</Button>\n            </Columns.Column>\n          </Columns>\n        </Container>\n        <Container>\n          <Heading>\n            The Current Count is: {this.state.count}\n          </Heading>\n        </Container>\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}